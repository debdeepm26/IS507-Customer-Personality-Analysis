{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5f039153",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'imblearn'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Input \u001b[0;32mIn [2]\u001b[0m, in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcluster\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DBSCAN \u001b[38;5;66;03m#clustering\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m train_test_split, GridSearchCV \u001b[38;5;66;03m#data split, grid search\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mimblearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mover_sampling\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m SMOTE \u001b[38;5;66;03m#balance classes\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlinear_model\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LogisticRegression \u001b[38;5;66;03m#logistic regression\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msvm\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m SVC \u001b[38;5;66;03m#support vector machine\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'imblearn'"
     ]
    }
   ],
   "source": [
    "#Import Libraries\n",
    "import numpy as np #linear algebra\n",
    "import pandas as pd #data processing\n",
    "import matplotlib.pyplot as plt #data viz\n",
    "import seaborn as sns #data viz\n",
    "from sklearn.impute import SimpleImputer #imputes missing vals\n",
    "from datetime import datetime \n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder #preprocessing\n",
    "from sklearn.compose import ColumnTransformer #preprocessing\n",
    "from sklearn.decomposition import PCA #dimensionality reduction\n",
    "from sklearn.cluster import DBSCAN #clustering\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV #data split, grid search\n",
    "from imblearn.over_sampling import SMOTE #balance classes\n",
    "from sklearn.linear_model import LogisticRegression #logistic regression\n",
    "from sklearn.svm import SVC #support vector machine\n",
    "from sklearn.neighbors import KNeighborsClassifier #knn\n",
    "from sklearn.naive_bayes import GaussianNB #bayes\n",
    "from xgboost import XGBClassifier #gradient boosting tree\n",
    "from sklearn.metrics import accuracy_score, recall_score #calculates accuracy, recall\n",
    "from sklearn.ensemble import VotingClassifier#ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d82ed580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_Birth</th>\n",
       "      <th>Education</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Income</th>\n",
       "      <th>Kidhome</th>\n",
       "      <th>Teenhome</th>\n",
       "      <th>Dt_Customer</th>\n",
       "      <th>Recency</th>\n",
       "      <th>MntWines</th>\n",
       "      <th>MntFruits</th>\n",
       "      <th>MntMeatProducts</th>\n",
       "      <th>MntFishProducts</th>\n",
       "      <th>MntSweetProducts</th>\n",
       "      <th>MntGoldProds</th>\n",
       "      <th>NumDealsPurchases</th>\n",
       "      <th>NumWebPurchases</th>\n",
       "      <th>NumCatalogPurchases</th>\n",
       "      <th>NumStorePurchases</th>\n",
       "      <th>NumWebVisitsMonth</th>\n",
       "      <th>AcceptedCmp3</th>\n",
       "      <th>AcceptedCmp4</th>\n",
       "      <th>AcceptedCmp5</th>\n",
       "      <th>AcceptedCmp1</th>\n",
       "      <th>AcceptedCmp2</th>\n",
       "      <th>Complain</th>\n",
       "      <th>Z_CostContact</th>\n",
       "      <th>Z_Revenue</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5524</th>\n",
       "      <td>1957</td>\n",
       "      <td>Graduation</td>\n",
       "      <td>Single</td>\n",
       "      <td>58138.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>04-09-2012</td>\n",
       "      <td>58</td>\n",
       "      <td>635</td>\n",
       "      <td>88</td>\n",
       "      <td>546</td>\n",
       "      <td>172</td>\n",
       "      <td>88</td>\n",
       "      <td>88</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2174</th>\n",
       "      <td>1954</td>\n",
       "      <td>Graduation</td>\n",
       "      <td>Single</td>\n",
       "      <td>46344.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>08-03-2014</td>\n",
       "      <td>38</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4141</th>\n",
       "      <td>1965</td>\n",
       "      <td>Graduation</td>\n",
       "      <td>Together</td>\n",
       "      <td>71613.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21-08-2013</td>\n",
       "      <td>26</td>\n",
       "      <td>426</td>\n",
       "      <td>49</td>\n",
       "      <td>127</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6182</th>\n",
       "      <td>1984</td>\n",
       "      <td>Graduation</td>\n",
       "      <td>Together</td>\n",
       "      <td>26646.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10-02-2014</td>\n",
       "      <td>26</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5324</th>\n",
       "      <td>1981</td>\n",
       "      <td>PhD</td>\n",
       "      <td>Married</td>\n",
       "      <td>58293.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19-01-2014</td>\n",
       "      <td>94</td>\n",
       "      <td>173</td>\n",
       "      <td>43</td>\n",
       "      <td>118</td>\n",
       "      <td>46</td>\n",
       "      <td>27</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Year_Birth   Education Marital_Status   Income  Kidhome  Teenhome  \\\n",
       "ID                                                                        \n",
       "5524        1957  Graduation         Single  58138.0        0         0   \n",
       "2174        1954  Graduation         Single  46344.0        1         1   \n",
       "4141        1965  Graduation       Together  71613.0        0         0   \n",
       "6182        1984  Graduation       Together  26646.0        1         0   \n",
       "5324        1981         PhD        Married  58293.0        1         0   \n",
       "\n",
       "     Dt_Customer  Recency  MntWines  MntFruits  MntMeatProducts  \\\n",
       "ID                                                                \n",
       "5524  04-09-2012       58       635         88              546   \n",
       "2174  08-03-2014       38        11          1                6   \n",
       "4141  21-08-2013       26       426         49              127   \n",
       "6182  10-02-2014       26        11          4               20   \n",
       "5324  19-01-2014       94       173         43              118   \n",
       "\n",
       "      MntFishProducts  MntSweetProducts  MntGoldProds  NumDealsPurchases  \\\n",
       "ID                                                                         \n",
       "5524              172                88            88                  3   \n",
       "2174                2                 1             6                  2   \n",
       "4141              111                21            42                  1   \n",
       "6182               10                 3             5                  2   \n",
       "5324               46                27            15                  5   \n",
       "\n",
       "      NumWebPurchases  NumCatalogPurchases  NumStorePurchases  \\\n",
       "ID                                                              \n",
       "5524                8                   10                  4   \n",
       "2174                1                    1                  2   \n",
       "4141                8                    2                 10   \n",
       "6182                2                    0                  4   \n",
       "5324                5                    3                  6   \n",
       "\n",
       "      NumWebVisitsMonth  AcceptedCmp3  AcceptedCmp4  AcceptedCmp5  \\\n",
       "ID                                                                  \n",
       "5524                  7             0             0             0   \n",
       "2174                  5             0             0             0   \n",
       "4141                  4             0             0             0   \n",
       "6182                  6             0             0             0   \n",
       "5324                  5             0             0             0   \n",
       "\n",
       "      AcceptedCmp1  AcceptedCmp2  Complain  Z_CostContact  Z_Revenue  Response  \n",
       "ID                                                                              \n",
       "5524             0             0         0              3         11         1  \n",
       "2174             0             0         0              3         11         0  \n",
       "4141             0             0         0              3         11         0  \n",
       "6182             0             0         0              3         11         0  \n",
       "5324             0             0         0              3         11         0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_columns', None)\n",
    "customer_data = pd.read_csv('marketing_campaign.csv',\n",
    "                           delimiter='\\t', index_col='ID')\n",
    "customer_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f462563d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '29-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '18-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-07-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-07-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-05-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '13-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-10-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-10-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '16-08-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-04-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-11-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-04-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-06-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '22-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-09-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '23-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-03-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-01-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '25-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '31-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-02-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '19-05-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-12-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-07-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '26-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '14-01-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-06-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '24-08-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '28-02-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '30-11-2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '27-03-2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '15-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '17-09-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '21-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
      "/var/folders/xp/fzj8h07x52n24_x835lrmtbr0000gn/T/ipykernel_93425/2866335758.py:6: UserWarning: Parsing '20-12-2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Education</th>\n",
       "      <th>Income</th>\n",
       "      <th>Recency</th>\n",
       "      <th>MntWines</th>\n",
       "      <th>MntFruits</th>\n",
       "      <th>MntMeatProducts</th>\n",
       "      <th>MntFishProducts</th>\n",
       "      <th>MntSweetProducts</th>\n",
       "      <th>MntGoldProds</th>\n",
       "      <th>NumDealsPurchases</th>\n",
       "      <th>NumWebPurchases</th>\n",
       "      <th>NumCatalogPurchases</th>\n",
       "      <th>NumStorePurchases</th>\n",
       "      <th>NumWebVisitsMonth</th>\n",
       "      <th>Complain</th>\n",
       "      <th>Response</th>\n",
       "      <th>Age</th>\n",
       "      <th>Days_Since_Customer</th>\n",
       "      <th>Fam_Size</th>\n",
       "      <th>Num_Accepted</th>\n",
       "      <th>MntTotal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5524</th>\n",
       "      <td>Graduation</td>\n",
       "      <td>58138.0</td>\n",
       "      <td>58</td>\n",
       "      <td>635</td>\n",
       "      <td>88</td>\n",
       "      <td>546</td>\n",
       "      <td>172</td>\n",
       "      <td>88</td>\n",
       "      <td>88</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>64</td>\n",
       "      <td>3873.865577</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2174</th>\n",
       "      <td>Graduation</td>\n",
       "      <td>46344.0</td>\n",
       "      <td>38</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>3027.865577</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4141</th>\n",
       "      <td>Graduation</td>\n",
       "      <td>71613.0</td>\n",
       "      <td>26</td>\n",
       "      <td>426</td>\n",
       "      <td>49</td>\n",
       "      <td>127</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>3374.865577</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6182</th>\n",
       "      <td>Graduation</td>\n",
       "      <td>26646.0</td>\n",
       "      <td>26</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>2967.865577</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5324</th>\n",
       "      <td>PhD</td>\n",
       "      <td>58293.0</td>\n",
       "      <td>94</td>\n",
       "      <td>173</td>\n",
       "      <td>43</td>\n",
       "      <td>118</td>\n",
       "      <td>46</td>\n",
       "      <td>27</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>3223.865577</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Education   Income  Recency  MntWines  MntFruits  MntMeatProducts  \\\n",
       "ID                                                                         \n",
       "5524  Graduation  58138.0       58       635         88              546   \n",
       "2174  Graduation  46344.0       38        11          1                6   \n",
       "4141  Graduation  71613.0       26       426         49              127   \n",
       "6182  Graduation  26646.0       26        11          4               20   \n",
       "5324         PhD  58293.0       94       173         43              118   \n",
       "\n",
       "      MntFishProducts  MntSweetProducts  MntGoldProds  NumDealsPurchases  \\\n",
       "ID                                                                         \n",
       "5524              172                88            88                  3   \n",
       "2174                2                 1             6                  2   \n",
       "4141              111                21            42                  1   \n",
       "6182               10                 3             5                  2   \n",
       "5324               46                27            15                  5   \n",
       "\n",
       "      NumWebPurchases  NumCatalogPurchases  NumStorePurchases  \\\n",
       "ID                                                              \n",
       "5524                8                   10                  4   \n",
       "2174                1                    1                  2   \n",
       "4141                8                    2                 10   \n",
       "6182                2                    0                  4   \n",
       "5324                5                    3                  6   \n",
       "\n",
       "      NumWebVisitsMonth  Complain  Response  Age  Days_Since_Customer  \\\n",
       "ID                                                                      \n",
       "5524                  7         0         1   64          3873.865577   \n",
       "2174                  5         0         0   67          3027.865577   \n",
       "4141                  4         0         0   56          3374.865577   \n",
       "6182                  6         0         0   37          2967.865577   \n",
       "5324                  5         0         0   40          3223.865577   \n",
       "\n",
       "      Fam_Size  Num_Accepted  MntTotal  \n",
       "ID                                      \n",
       "5524         1             0      2252  \n",
       "2174         3             0        38  \n",
       "4141         2             0      1202  \n",
       "6182         3             0        64  \n",
       "5324         3             0       595  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Feature Engineering\n",
    "#Create 'Age' feature from customer's birth year\n",
    "customer_data['Age'] = customer_data.Year_Birth.apply(lambda x: 2021 - int(x))\n",
    "\n",
    "#Create 'Days_Since_Customer' feature from time the customer enrolled\n",
    "customer_data['Dt_Customer'] = pd.to_datetime(customer_data.Dt_Customer)\n",
    "now = datetime.now()\n",
    "customer_data['Days_Since_Customer'] = customer_data.Dt_Customer.apply(lambda x: (now - x).total_seconds()/ (60 * 60 * 24))\n",
    "\n",
    "#Create 'Fam_Size' feature from the marriage status, number of kids/teens\n",
    "marital_map = {'Absurd': 1, 'Alone': 1, 'YOLO': 1, 'Single': 1,\n",
    "              'Married': 2, 'Together': 2, 'Widow': 1, 'Divorced': 1}\n",
    "customer_data['Marital_Status'] = customer_data.Marital_Status.map(marital_map) #Maps all singles as 1, couples as 2\n",
    "customer_data['Num_Kids'] = customer_data.Kidhome.values + customer_data.Teenhome.values\n",
    "customer_data['Fam_Size'] = customer_data.Marital_Status.values + customer_data.Num_Kids.values\n",
    "\n",
    "#Create 'Num_Accepted' feature from the sum of previous marketting campaigns that were accepted by the customer\n",
    "customer_data['Num_Accepted'] = customer_data.AcceptedCmp1.values + customer_data.AcceptedCmp2.values + \\\n",
    "                                customer_data.AcceptedCmp3.values + customer_data.AcceptedCmp4.values + \\\n",
    "                                customer_data.AcceptedCmp5.values\n",
    "\n",
    "#Create 'MntTotal' for total amount spent on all items\n",
    "customer_data['MntTotal'] = customer_data['MntWines'].values + customer_data['MntFruits'].values + \\\n",
    "                            customer_data['MntMeatProducts'].values + customer_data['MntFishProducts'].values + \\\n",
    "                            customer_data['MntWines'].values + customer_data['MntSweetProducts'].values + \\\n",
    "                            customer_data['MntGoldProds'].values\n",
    "\n",
    "#Drops the unnecessary features from the original dataset\n",
    "customer_data.drop(['Dt_Customer', 'Year_Birth', 'AcceptedCmp1', 'AcceptedCmp2',\n",
    "                    'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Kidhome', 'Teenhome',\n",
    "                   'Z_CostContact', 'Z_Revenue', 'Num_Kids', 'Marital_Status'],\n",
    "                   axis=1, inplace=True)\n",
    "customer_data.head() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b378af5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Shape: (2240, 21)\n",
      "-------------------------------\n",
      "Total Nulls Per Column:\n",
      "Education               0\n",
      "Income                 24\n",
      "Recency                 0\n",
      "MntWines                0\n",
      "MntFruits               0\n",
      "MntMeatProducts         0\n",
      "MntFishProducts         0\n",
      "MntSweetProducts        0\n",
      "MntGoldProds            0\n",
      "NumDealsPurchases       0\n",
      "NumWebPurchases         0\n",
      "NumCatalogPurchases     0\n",
      "NumStorePurchases       0\n",
      "NumWebVisitsMonth       0\n",
      "Complain                0\n",
      "Response                0\n",
      "Age                     0\n",
      "Days_Since_Customer     0\n",
      "Fam_Size                0\n",
      "Num_Accepted            0\n",
      "MntTotal                0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Prints the size of the dataset\n",
    "print('Dataset Shape:', customer_data.shape)\n",
    "print('-------------------------------')\n",
    "#Check if any columns contain null\n",
    "print('Total Nulls Per Column:')\n",
    "print(customer_data.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "080eacfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imputes the mean\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "imputer.fit(customer_data.Income.values.reshape(-1,1))\n",
    "customer_data['Income'] = imputer.transform(customer_data.Income.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5d901724",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "334 customers responded to the marketing campaign out of a total of 2240 cutomers.\n",
      "Percent Responded: 14.91%\n"
     ]
    }
   ],
   "source": [
    "#Calculate percent of responses\n",
    "pos_resp = customer_data.Response.sum()\n",
    "total = customer_data.shape[0]\n",
    "percent = round((pos_resp / total)*100, 2)\n",
    "\n",
    "print(pos_resp, 'customers responded to the marketing campaign out of a total of', total, 'cutomers.')\n",
    "print('Percent Responded: ' +  str(percent) + '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1cfa26c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessed Data:\n",
      "[ 0.          0.          1.          0.          0.          0.23532677\n",
      "  0.30703926  0.98378127  1.55157698  1.67970233  2.46214705  1.4765001\n",
      "  0.84320691  0.34941394  1.40930394  2.51089024 -0.55078479  0.69390374\n",
      " -0.09728167  0.98534473  1.97674456 -1.75911463 -0.43903713  1.4669731 ]\n"
     ]
    }
   ],
   "source": [
    "#Remove the 'Response' column because it is the target of future predictive model\n",
    "X, y = customer_data.drop('Response', axis=1).values, customer_data['Response'].values\n",
    "\n",
    "#Creates a column transformer that sends 'Education' to be encoded and rest scaled\n",
    "ct = ColumnTransformer([\n",
    "    ('catagoric', OneHotEncoder(), [0]),\n",
    "    ('numeric', StandardScaler(), list(range(1, len(X.T))))\n",
    "])\n",
    "\n",
    "#Sends the data through the column transformer\n",
    "X_transformed = ct.fit_transform(X)\n",
    "print('Preprocessed Data:')\n",
    "print(X_transformed[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea7df40d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimentionality Reduced Data:\n",
      "[ 4.19629277  1.01591743 -2.28901539]\n"
     ]
    }
   ],
   "source": [
    "#Create instance of Principal Component Analysis in order to reduce dimensionality while maintaining variance\n",
    "#n_components=3 will be chosen in order to visualize the data better\n",
    "pca = PCA(n_components=3)\n",
    "\n",
    "#fit to dataset\n",
    "pca.fit(X_transformed)\n",
    "\n",
    "#create dimentionality reduced dataset\n",
    "X_reduced = pca.transform(X_transformed)\n",
    "\n",
    "print('Dimentionality Reduced Data:')\n",
    "print(X_reduced[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "721dae6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster Predictions\n",
      "-------------------------------\n",
      "Number of clusters: 3\n",
      "Number of noise points: 751\n",
      "Number of points per cluster:\n",
      "Cluster 0 : 1293\n",
      "Cluster 1 : 29\n",
      "Cluster 2 : 167\n"
     ]
    }
   ],
   "source": [
    "#Create an instance of DBSCAN to create non spherical clusters based on data density\n",
    "db = DBSCAN(eps=0.726, min_samples=26)\n",
    "\n",
    "#fit to the dimentionality reduced dataset\n",
    "db.fit(X_reduced)\n",
    "\n",
    "#identify the clusters\n",
    "clusters = db.labels_\n",
    "\n",
    "#display metrics/sample\n",
    "n_clusters_ = len(set(clusters)) - (1 if -1 in clusters else 0)\n",
    "n_noise_ = list(clusters).count(-1)\n",
    "\n",
    "print('Cluster Predictions')\n",
    "print('-------------------------------')\n",
    "print(\"Number of clusters: %d\" % n_clusters_)\n",
    "print(\"Number of noise points: %d\" % n_noise_)\n",
    "print('Number of points per cluster:')\n",
    "for i in range(n_clusters_):\n",
    "    print('Cluster', i, ':', len(clusters[clusters==i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3f741b22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the 3d dataset\n",
    "fig = plt.figure(figsize=(20,20))\n",
    "ax = fig.add_subplot(111, projection=\"3d\")\n",
    "ax.scatter(X_reduced.T[1],X_reduced.T[2],X_reduced.T[0], \n",
    "           c=clusters)\n",
    "ax.set_title(\"Customer Clusters in 3 Dimensions\")\n",
    "ax.legend(['Outliers'])\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
